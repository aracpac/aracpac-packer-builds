# Run locally like:
#   ansible-playbook -c local -i localhost, main.yml
########################################################################################################################
# Prepare the server by adding any files and configuration that are expected by later steps ############################
########################################################################################################################
- name: "preparing the server"
  become: "yes"
  hosts: "all"
  tags:
    - "prepare_server"
  vars_files:
    - "host_vars/common.yml"
  tasks:
    - name: "generate an OpenSSL private key"
      openssl_privatekey:
        path: "/etc/ssl/dev.pem"
    - name: "generate an OpenSSL Certificate Signing Request"
      openssl_csr:
        common_name: "*.local"
        country_name: "CA"
        email_address: "root@dev.local"
        extended_key_usage: "serverAuth"
        key_usage: "digitalSignature"
        organization_name: "Dev"
        path: "/etc/ssl/dev.csr"
        privatekey_path: "/etc/ssl/dev.pem"
        subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
      with_dict:
        dns_server:
          - "*.*.local"
    - name: "sign the CSR file as a CA to turn it into a certificate"
      openssl_certificate:
        csr_path: "/etc/ssl/dev.csr"
        path: "/etc/ssl/dev.crt"
        privatekey_path: "/etc/ssl/dev.pem"
        provider: "selfsigned"
        selfsigned_not_after: "+730d" # this is the maximum valid length
    - name: "enable the dynamic CA configuration feature"
      command:
        cmd: "update-ca-certificates force-enable"
    - name: "ensure that {{ server_document_root }} exists"
      file:
        path: "{{ server_document_root }}"
        recurse: "yes"
        state: "directory"
    - name: "create server users and add them to the wheel group"
      user:
        append: "yes"
        createhome: "yes"
        groups:
          - "sudo"
        name: "{{ item.user }}"
        password: "{{ item.pass | password_hash('sha512') }}"
        shell: "/bin/bash"
        state: "present"
        update_password: "on_create"
      with_items: "{{ server_users }}"
    - name: "add a ~/.ssh folder for each user"
      file:
        dest: "/home/{{ item.user }}/.ssh"
        state: "directory"
        owner: "{{ item.user }}"
        group: "{{ item.user }}"
      with_items: "{{ server_users }}"
    - name: "add the Vagrant insecure key to each user's ~/.ssh/authorized_keys file"
      get_url:
        url: "https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub"
        dest: "/home/{{ item.user }}/.ssh/authorized_keys"
        group: "{{ item.user }}"
        owner: "{{ item.user }}"
      with_items: "{{ server_users }}"
    - name: "enable passwordless sudo"
      copy:
        dest: "/etc/sudoers.d/99_{{ item.user }}"
        content: "{{ item.user }} ALL=(ALL) NOPASSWD:ALL"
      with_items: "{{ server_users }}"
    - name: "add dotfiles to each user's user directory"
      copy:
        dest: "/home/{{ item.user }}"
        group: "{{ item.user }}"
        mode: "u=rw,g=r,o=r"
        owner: "{{ item.user }}"
        src: "files/dotfiles/"
      with_items: "{{ server_users }}"
########################################################################################################################

########################################################################################################################
# Install packages that don't require configuration ####################################################################
########################################################################################################################
- name: "installing packages"
  become: "yes"
  hosts: "all"
  tags:
    - "install_packages"
  vars_files:
    - "host_vars/common.yml"
  pre_tasks:
  - name: "set postfix option type as no configuration"
    debconf:
      name: "postfix"
      question: "postfix/main_mailer_type"
      value: "'No configuration'"
      vtype: "string"
  tasks:
  # See the default Ubuntu 20 package list at http://releases.ubuntu.com/20.04.1/ubuntu-20.04.1-live-server-amd64.manifest
  - name: "installing packages from package manager"
    apt:
      name:
        - "acl"
        - "aptitude"
        - "atop"
        - "bind9-utils"
        - "build-essential"
        - "byobu"
        - "clang"
        - "firewalld"
        - "golang"
        - "imagemagick"
        - "iotop"
        - "net-tools"
        - "pip"
        - "policycoreutils-python-utils"
        - "postfix"
        - "python3"
        - "pv"
        - "vim"
        - "rustc"
        - "sendmail-cf"
        - "supervisor"
        - "tree"
        - "vim"
        - "unzip"
  - name: "installing packages via installers"
    raw: "{{ item }}"
    args:
      executable: "/bin/bash"
    with_items:
      - "curl --silent --location https://get.symfony.com/cli/installer | bash - && mv $HOME/.symfony/bin/symfony /usr/local/bin/symfony && rm -fr $HOME/.symfony" # symfony
########################################################################################################################

########################################################################################################################
# Install roles (packages that do require configuration) ###############################################################
########################################################################################################################
- name: "installing roles"
  become: "yes"
  hosts: "all"
  tags:
    - "install_roles"
  vars_files:
    - "host_vars/common.yml"
  pre_tasks:
    - include_role: # TODO: move this into the regular roles once the upstream php-versions repo stops wiping out php_packages
        name: "geerlingguy.php-versions"
      vars:
        __php_packages: "{{ php_packages }}"
    - name: "add postgresql ubuntu repo key"
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: "present"
    - name: "install the postgresql ubuntu repo"
      apt_repository:
        repo: "deb https://apt.postgresql.org/pub/repos/apt focal-pgdg main"
        state: "present"
    - include_role:
        name: "geerlingguy.postgresql"
      vars:
        __postgresql_version: "13"
        __postgresql_packages:
          - "postgresql-13"
          - "postgresql-contrib"
  roles:
    - "geerlingguy.php"
    - "geerlingguy.apache"
    - "geerlingguy.nginx"
    - "geerlingguy.docker"
    - "geerlingguy.varnish"
    - "geerlingguy.mysql"
    - "geerlingguy.php-mysql"
    - "geerlingguy.php-pgsql"
    - "geerlingguy.memcached"
    - "geerlingguy.php-memcached"
    - "geerlingguy.java"
    - "geerlingguy.composer"
    - "geerlingguy.nodejs"
    - "geerlingguy.nfs"
  post_tasks:
    - name: "installing PostGIS (requires PostgreSQL to be installed first)"
      apt:
        name:
          - "postgresql-13-postgis-3"
    - name: "installing xdebug via pear and enabling php-fpm"
      raw: "{{ item }}"
      args:
        executable: "/bin/bash"
      with_items:
        - "pecl channel-update pecl.php.net"
        - "pecl install xdebug"
        - "a2enmod proxy_fcgi"
        - "a2enconf php8.0-fpm"
    - name: "create xdebug log file"
      file:
        mode: "0777"
        path: "/var/log/xdebug.log"
        state: "touch"
    - name: "create xdebug config"
      copy:
        dest: "/etc/php/8.0/mods-available/xdebug.ini"
        content: |
          [XDebug]
          zend_extension=/usr/lib/php/20200930/xdebug.so
          xdebug.log=/var/log/xdebug.log
          xdebug.client_host=localhost
          xdebug.client_port=9003
          xdebug.discover_client_host=true
          xdebug.idekey=xdebug.ide
          xdebug.log_level=7
          xdebug.max_nesting_level=256
          xdebug.mode=off
          xdebug.start_with_request=true
    - name: "enable xdebug"
      file:
        dest: "{{ item }}"
        src: "/etc/php/8.0/mods-available/xdebug.ini"
        state: "link"
      with_items:
        - "/etc/php/8.0/apache2/conf.d/20-xdebug.ini"
        - "/etc/php/8.0/cli/conf.d/20-xdebug.ini"
        - "/etc/php/8.0/fpm/conf.d/20-xdebug.ini"
    - name: "update default apache vhost"
      replace:
        path: "/etc/apache2/apache2.conf"
        regexp: '(.*)(\/var\/www\/html)(.*)'
        replace: '\1/var/www\3'
      notify: "restart apache"
    - name: "install varnish devel"
      apt:
        name: "varnish-dev"
        state: "present"
      notify: "restart varnish"
    - name: "install packages to compile Varnish VMODs"
      apt:
        name: [
          'autoconf',
          'automake',
          'libjemalloc-dev',
          'libtool',
          'pkg-config',
          'python3-docutils',
          'python3-sphinx'
        ]
        state: "present"
    - name: "check if we need to build the VMODs"
      command: "ls /usr/lib64/varnish/vmods/libvmod_xkey.so"
      ignore_errors: "yes"
      register: "result"
    - name: "registering variable from last command"
      set_fact:
        varnish_build_vmods: "{{ result.failed }}"
      when: result is defined
    - name: "get the VMODs repo"
      git:
        dest: "/tmp/vmods"
        repo: "https://github.com/varnish/varnish-modules.git"
        version: "6.6"
      when: "varnish_build_vmods"
    - name: "bootstrap the source"
      args:
        chdir: "/tmp/vmods"
      command: "./bootstrap"
      when: "varnish_build_vmods"
    - name: "configure the source"
      args:
        chdir: "/tmp/vmods"
      command: "./configure"
      when: "varnish_build_vmods"
    - name: "switch to build directory"
      make:
        chdir: "/tmp/vmods"
      when: "varnish_build_vmods"
    - name: "build varnish VMODs"
      make:
        chdir: "/tmp/vmods"
        target: "install"
      notify: "restart varnish"
      when: "varnish_build_vmods"
    - name: "remove /tmp/vmods"
      file:
        path: "/tmp/vmods"
        state: "absent"
      when: "varnish_build_vmods"
########################################################################################################################

########################################################################################################################
# Configure projector #####################################################################################################
########################################################################################################################
- name: "configuring projector"
  become: "yes"
  hosts: "all"
  tags:
    - "configure_projector"
  vars_files:
    - "host_vars/common.yml"
  tasks:
    - name: "install jetbrains projector-installer"
      pip:
        name: "projector-installer"
        executable: "pip3"
    - name: "install projector IDEs"
      command: "/usr/local/bin/projector --config-directory=/etc/projector --cache-directory=/etc/projector --accept-license autoinstall --config-name {{ item.config|quote }} --ide-name {{ item.ide|quote }}"
      args:
        creates: "{{projector_configs + item.config}}"
      with_items: "{{ projector_ides }}"
    - name: "install projector IDE certs for SSL"
      command: "/usr/local/bin/projector --config-directory=/etc/projector --cache-directory=/etc/projector --accept-license install-certificate {{ item.config|quote }}"
      args:
        creates: "{{ projector_configs + item.config + '/ssl.properties' }}"
      with_items: "{{ projector_ides }}"
    - name: "create service files for projector IDEs"
      template:
        src: "templates/projector/service.j2"
        dest: "/etc/systemd/system/projector_{{ item.config }}.service"
      vars: { config: "{{ item.config }}", ide: "{{ item.ide }}" }
      with_items: "{{ projector_ides }}"
    - name: "increase inotify max user watches"
      lineinfile:
        path: "/etc/sysctl.conf"
        state: "present"
        line: "fs.inotify.max_user_watches=524288"
    - name : "find installer archives"
      find:
        paths: "/etc/projector"
        patterns: '*.gz'
      register: "installer_archives"
    - name: "delete installer archives"
      file:
        path: "{{ item.path }}"
        state: "absent"
      with_items: "{{ installer_archives.files }}"
########################################################################################################################

########################################################################################################################
# Configure apache #####################################################################################################
########################################################################################################################
- name: "configuring apache"
  become: "yes"
  hosts: "all"
  tags:
    - "configure_apache"
  vars_files:
    - "host_vars/common.yml"
  tasks:
    - name: "add the local users to the apache group"
      user:
        append: "yes"
        groups: "{{ apache_group }}"
        name: "{{ item.user }}"
      with_items: "{{ server_users }}"
    - name: "add the apache user to the local users' groups"
      user:
        append: "yes"
        groups: "{{ item.user }}"
        name: "{{ apache_group }}"
      with_items: "{{ server_users }}"
    - name: "give vagrant user and apache group recursive ownership of {{ server_document_root }} and set the group sticky bit"
      file:
        group: "{{ apache_group }}"
        mode: "u=rwX,g=srwX,o=rX"
        owner: "vagrant"
        path: "{{ server_document_root }}"
        recurse: "yes"
    - name: "add an /etc/systemd/system/{{ php_webserver_daemon }}.service.d/ folder to set an apache umask override in"
      file:
        dest: "/etc/systemd/system/{{ php_webserver_daemon }}.service.d/"
        state: "directory"
    - name: "set an apache umask override"
      copy:
        content: |
          [Service]
          UMask=0002
        dest: "/etc/systemd/system/{{ php_webserver_daemon }}.service.d/override.conf"
    - name: "create an index.php for the default box"
      copy:
        content: |
          <?php
          phpinfo();
          ?>
        dest: "{{ server_document_root }}/index.php"
        force: "no"
        group: "{{ apache_group }}"
        mode: "u+rw,g+rw,o+r"
        owner: "vagrant"
    - name: "add logrotate entry for apache2"
      template:
        dest: "/etc/logrotate.d/apache2"
        mode: "0644"
        src: "templates/logrotate.d/apache2.j2"
    - name: "remove the {{ server_cgi_root }} directory"
      file:
        path: "{{ server_cgi_root }}"
        state: "absent"
    - name: "reload apache"
      systemd:
        daemon_reload: "true"
        name: "{{ php_webserver_daemon }}"
        state: "reloaded"
########################################################################################################################

########################################################################################################################
# Configure firewalld ##################################################################################################
########################################################################################################################
- name: "configuring firewalld"
  become: "yes"
  hosts: "all"
  tags:
    - "configure_firewalld"
  vars_files:
    - "host_vars/common.yml"
  tasks:
    - name: "force the NFS lock manager to use a consistent UDP port (36389) when building a local box"
      template:
        dest: "/etc/modprobe.d/lockd.conf"
        mode: "0644"
        src: "templates/modprobe.d/lockd.conf"
    - name: "configure firewalld services"
      firewalld:
        permanent: "yes"
        service: "{{ item.name }}"
        state: "{{ item.state }}"
      with_items:
        - { name: "http", state: "enabled" }
        - { name: "https", state: "enabled" }
        - { name: "mountd", state: "enabled" }
        - { name: "mysql", state: "enabled" }
        - { name: "nfs", state: "enabled" }
        - { name: "postgresql", state: "enabled" }
        - { name: "rpc-bind", state: "enabled" }
        - { name: "samba", state: "enabled" }
        - { name: "ssh", state: "enabled" }
    - name: "configure firewalld ports"
      firewalld:
        permanent: "yes"
        port: "{{ item.port }}"
        state: "{{ item.state }}"
      with_items:
        - { port: "9999/tcp", state: "enabled" } # projector port
        - { port: "8080/tcp", state: "enabled" } # alt http
        - { port: "8443/tcp", state: "enabled" } # alt https
        - { port: "36389/tcp", state: "enabled" } # lockd windows
        - { port: "36389/udp", state: "enabled" } # lockd mac
    - name: "reload firewalld"
      systemd:
        daemon_reload: "true"
        name: "firewalld"
        state: "started"
########################################################################################################################

########################################################################################################################
# Configure postfix ####################################################################################################
########################################################################################################################
- name: "configuring postfix"
  become: "yes"
  hosts: "all"
  tags:
    - "configure_postfix"
  vars_files:
    - "host_vars/common.yml"
  tasks:
    - name: "ensure postfix is enabled and started"
      service:
        enabled: "yes"
        name: "postfix"
        state: "started"
########################################################################################################################

########################################################################################################################
# Disable select items #################################################################################################
########################################################################################################################
- name: "disabling select items"
  become: "yes"
  hosts: "all"
  tags:
    - "disable_items"
  vars_files:
    - "host_vars/common.yml"
  tasks:
    - name: "ensure apache is enabled and started"
      service:
        enabled: "yes"
        name: "apache2"
        state: "started"
    - name: "ensure nginx is disabled and stopped"
      service:
        enabled: "no"
        name: "nginx"
        state: "stopped"
    - name: "ensure varnish is disabled and stopped"
      service:
        enabled: "no"
        name: "varnish"
        state: "stopped"
    - name: "ensure memcached is disabled and stopped"
      service:
        enabled: "no"
        name: "memcached"
        state: "stopped"
########################################################################################################################